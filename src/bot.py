import os
import logging
import redis
import mysql.connector
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TELEGRAM_TOKEN', 'YOUR_BOT_TOKEN_HERE')
MYSQL_HOST = os.environ.get('MYSQL_HOST', 'localhost')
MYSQL_USER = os.environ.get('MYSQL_USER', 'root')
MYSQL_PASSWORD = os.environ.get('MYSQL_PASSWORD', 'mypassword')
MYSQL_DB = os.environ.get('MYSQL_DB', 'bot_db')
REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')

class DevOpsBot:
    def __init__(self):
        self.redis_client = None
        self.mysql_conn = None
        self.setup_connections()
        self.setup_database()

    def setup_connections(self):
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            self.redis_client = redis.Redis(host=REDIS_HOST, port=6379, decode_responses=True)
            logger.info("‚úÖ Connected to Redis")
        except Exception as e:
            logger.error(f"‚ùå Redis connection failed: {e}")

        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
            self.mysql_conn = mysql.connector.connect(
                host=MYSQL_HOST,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DB
            )
            logger.info("‚úÖ Connected to MySQL")
        except Exception as e:
            logger.error(f"‚ùå MySQL connection failed: {e}")

    def setup_database(self):
        if self.mysql_conn:
            cursor = self.mysql_conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_messages (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id BIGINT,
                    username VARCHAR(255),
                    message TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS bot_stats (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    command VARCHAR(100),
                    count INT DEFAULT 1,
                    last_used DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            self.mysql_conn.commit()
            cursor.close()

    def log_message(self, user_id, username, message):
        if self.mysql_conn:
            cursor = self.mysql_conn.cursor()
            cursor.execute(
                "INSERT INTO user_messages (user_id, username, message) VALUES (%s, %s, %s)",
                (user_id, username, message)
            )
            self.mysql_conn.commit()
            cursor.close()

    def update_stats(self, command):
        if self.mysql_conn:
            cursor = self.mysql_conn.cursor()
            cursor.execute(
                "INSERT INTO bot_stats (command) VALUES (%s) ON DUPLICATE KEY UPDATE count = count + 1, last_used = NOW()",
                (command,)
            )
            self.mysql_conn.commit()
            cursor.close()

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.log_message(user.id, user.username, "/start")
        self.update_stats("start")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis
        if self.redis_client:
            self.redis_client.hset(f"user:{user.id}", "username", user.username or "Unknown")
            self.redis_client.hset(f"user:{user.id}", "last_seen", datetime.now().isoformat())

        welcome_message = f"""
ü§ñ *DevOps Learning Bot*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–º–æ–≥—É –∏–∑—É—á–∞—Ç—å DevOps. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/docker - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker
/k8s - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kubernetes
/help - –ü–æ–º–æ—â—å

–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.update_stats("status")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        redis_status = "‚úÖ Connected" if self.redis_client else "‚ùå Disconnected"
        mysql_status = "‚úÖ Connected" if self.mysql_conn else "‚ùå Disconnected"
        
        status_message = f"""
üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

üî¥ Redis: {redis_status}
üóÑÔ∏è MySQL: {mysql_status}
üê≥ Docker: Running
‚ò∏Ô∏è Kubernetes: Running
‚è∞ Uptime: Available

ü§ñ Bot version: 1.0.0
        """
        await update.message.reply_text(status_message, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.update_stats("stats")
        
        if self.mysql_conn:
            cursor = self.mysql_conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_messages")
            total_messages = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(DISTINCT user_id) FROM user_messages")
            unique_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT command, count FROM bot_stats ORDER BY count DESC LIMIT 5")
            top_commands = cursor.fetchall()
            cursor.close()
            
            stats_text = f"""
üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}

üî• –¢–æ–ø –∫–æ–º–∞–Ω–¥:
"""
            for cmd, count in top_commands:
                stats_text += f"/{cmd}: {count} —Ä–∞–∑\n"
        else:
            stats_text = "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def docker_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.update_stats("docker")
        
        docker_info = """
üê≥ *Docker Information*

Docker - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –£–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
- –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∏–∑–æ–ª—è—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –£–ø—Ä–æ—â–∞—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
`docker run` - –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
`docker ps` - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
`docker build` - —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
`docker-compose up` - –∑–∞–ø—É—Å–∫ —Å—Ç–µ–∫–∞
        """
        await update.message.reply_text(docker_info, parse_mode='Markdown')

    async def k8s_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.update_stats("k8s")
        
        k8s_info = """
‚ò∏Ô∏è *Kubernetes Information*

Kubernetes - —Å–∏—Å—Ç–µ–º–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
- Service discovery
- Load balancing
- Rolling updates
- Self-healing

–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:
`Pod` - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
`Service` - —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞–º
`Deployment` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∞–º–∏
`ConfigMap` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        """
        await update.message.reply_text(k8s_info, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        message_text = update.message.text
        
        self.log_message(user.id, user.username, message_text)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        responses = {
            "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞ —Å –∏–∑—É—á–µ–Ω–∏–µ–º DevOps?",
            "–∫–∞–∫ –¥–µ–ª–∞": "–û—Ç–ª–∏—á–Ω–æ! –ò–∑—É—á–∞–µ–º DevOps –≤–º–µ—Å—Ç–µ! üöÄ",
            "docker": "Docker - –æ—Ç–ª–∏—á–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π /docker –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
            "kubernetes": "Kubernetes –º–æ—â–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π /k8s",
            "devops": "DevOps - —ç—Ç–æ –∫—É–ª—å—Ç—É—Ä–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏! üí™"
        }
        
        response = responses.get(message_text.lower(), 
                                f"–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!")
        
        await update.message.reply_text(response)

def main():
    bot = DevOpsBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    application.add_handler(CommandHandler("docker", bot.docker_info))
    application.add_handler(CommandHandler("k8s", bot.k8s_info))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ Bot starting...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
